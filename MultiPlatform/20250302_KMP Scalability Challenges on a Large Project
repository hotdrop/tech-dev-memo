# Kotlin Multiplatform Scalability Challenges on a Large Project
- AndroidDagashi #365 2025-02-23 より
- https://proandroiddev.com/kotlin-multiplatform-scalability-challenges-on-a-large-project-b3140e12da9d

# 要約
1. プロジェクトの背景
   1. 大規模プロジェクト（1000+ Gradleモジュール、150+ モバイル開発者）
   2. KMPをライブラリレベルで成功させた経験あり（WebRTCライブラリ）
   3. プロダクト機能としてKMPを適用するのは未経験
2. 適用の2つのアプローチ
   1. ライブラリとしてKMPを導入
      1. 独立したSDKのように扱う。導入も容易
   2. プロダクト機能としてKMPを導入
      1. UIを除く全レイヤーを共通化。他のネイティブライブラリとの統合が必要な上、多くの共通ライブラリ（DIやネットワークなど）と統合する必要がありスケールも難しい。
3. MVIライブラリのKMP化
   1. もともとプラットフォーム非依存な設計だったためスムーズに移行できたが、iOS適応に苦労した。Swift UIがまだ採用されておらずUIKitでのPresenter実装に手間がかかったとのこと。
4. ネットワークレイヤーの共通化
   1. KMP化が特に難しかった部分らしい。QUIC対応の課題が多かった
5. 導入
   1. 影響範囲が小さい箇所をA/Bテストで導入。MVI Flowを使っていてビジネスロジックの共通化はしやすい
   2. パフォーマンスやビルド、開発体験では特に問題なし。ただ、KMPのバージョン管理やiOSのビルド統合困難とのこと。
6. 現在
   1. KMPでビジネスロジックを共通化し、UIはネイティブで維持
   2. 「柔軟にUIを適応できる」アーキテクチャを目指す

# 感想
この素晴らしい記事から以下のようなことがわかりました。私の認識と概ね同じだったのも大きかったです、
1. 本番環境でも十分いけるレベル
2. iOSのビルド・フレームワーク管理がボトルネックになる
3. 「ビジネスロジックをKMPで統一し、UIはネイティブ維持」が最適な形

kotlinFestでもKMPを導入している企業は多かったので本番でも家k流レベルなのはある程度わかっていたが、多くのプロダクトがまだ`Jetpack Compose`や`SwiftUI`に対応していないと思うので、まずはビジネスロジックレイヤーをKMPで統一し、SDK的にライブラリの一つとして導入して徐々に浸透させていくのが良い進め方かなと感じました。
Swift6であればasync/awaitが使えるのでおそらくsuspend関数を呼び出しやすい、ただしCoroutineのキャンセルが伝搬されないみたいな話も聞いたので、この記事のようにまず小さく導入してKMPのアップデートとともに範囲を広げていくのが良いのかなと思います。